"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[309],{437:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-f7048c12",path:"/regular-expression.html",title:"正则表达式",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1.元字符",slug:"_1-元字符",children:[{level:3,title:"1.1  ? 限定符",slug:"_1-1-限定符",children:[]},{level:3,title:"1.2  * 限定符",slug:"_1-2-限定符",children:[]},{level:3,title:"1.3  + 限定符",slug:"_1-3-限定符",children:[]},{level:3,title:"1.4  {} 限定符",slug:"_1-4-限定符",children:[]},{level:3,title:"1.5  () 限定符（原子组）",slug:"_1-5-限定符-原子组",children:[]},{level:3,title:"1.6  | 或运算符",slug:"_1-6-或运算符",children:[]},{level:3,title:"1.7  [] 字符类（原子表）",slug:"_1-7-字符类-原子表",children:[]},{level:3,title:"1.8  ^ 限定符（用于原子表）",slug:"_1-8-限定符-用于原子表",children:[]},{level:3,title:"1.9  \\d",slug:"_1-9-d",children:[]},{level:3,title:"1.10  \\w",slug:"_1-10-w",children:[]},{level:3,title:"1.11  \\s",slug:"_1-11-s",children:[]},{level:3,title:"1.12  \\D、\\W、\\S",slug:"_1-12-d、-w、-s",children:[]},{level:3,title:"1.13  . 限定符",slug:"_1-13-限定符",children:[]},{level:3,title:"1.14  ^、$ 限定符",slug:"_1-14-、-限定符",children:[]},{level:3,title:"1.15  \\b",slug:"_1-15-b",children:[]},{level:3,title:"1.16  贪婪与懒惰匹配",slug:"_1-16-贪婪与懒惰匹配",children:[]}]},{level:2,title:"2.深入正则",slug:"_2-深入正则",children:[{level:3,title:"2.1 正则的一些应用",slug:"_2-1-正则的一些应用",children:[]},{level:3,title:"2.2 字面量创建正则表达式",slug:"_2-2-字面量创建正则表达式",children:[]},{level:3,title:"2.3 对象创建正则表达式",slug:"_2-3-对象创建正则表达式",children:[]},{level:3,title:"2.4 转义",slug:"_2-4-转义",children:[]},{level:3,title:"2.5 字符边界约束",slug:"_2-5-字符边界约束",children:[]},{level:3,title:"2.6 match 用法",slug:"_2-6-match-用法",children:[]},{level:3,title:"2.7  \\d、\\s 实例",slug:"_2-7-d、-s-实例",children:[]},{level:3,title:"2.8  \\w 实例：判断邮箱 / 判断用户名",slug:"_2-8-w-实例-判断邮箱-判断用户名",children:[]},{level:3,title:"2.9 精巧地匹配所有字符",slug:"_2-9-精巧地匹配所有字符",children:[]},{level:3,title:"2.10 i 与 g 模式修正符",slug:"_2-10-i-与-g-模式修正符",children:[]},{level:3,title:"2.11 m 多行匹配修正符（优雅）",slug:"_2-11-m-多行匹配修正符-优雅",children:[]},{level:3,title:"2.12 汉字与字符属性 /u",slug:"_2-12-汉字与字符属性-u",children:[]},{level:3,title:"2.13 lastIndex 属性的作用",slug:"_2-13-lastindex-属性的作用",children:[]},{level:3,title:"2.14 y模式：粘连修饰符",slug:"_2-14-y模式-粘连修饰符",children:[]},{level:3,title:"2.15 原子表基本使用",slug:"_2-15-原子表基本使用",children:[]},{level:3,title:"2.16 原子表区间匹配",slug:"_2-16-原子表区间匹配",children:[]},{level:3,title:"2.17 排除匹配",slug:"_2-17-排除匹配",children:[]},{level:3,title:"2.18 正则操作 DOM 元素",slug:"_2-18-正则操作-dom-元素",children:[]},{level:3,title:"2.19 原子组",slug:"_2-19-原子组",children:[]},{level:3,title:"2.20 邮箱验证",slug:"_2-20-邮箱验证",children:[]},{level:3,title:"2.21 原子组引用完成替换操作",slug:"_2-21-原子组引用完成替换操作",children:[]}]},{level:2,title:"3. 再深入一下正则",slug:"_3-再深入一下正则",children:[{level:3,title:"3.1 嵌套分组与不记录组",slug:"_3-1-嵌套分组与不记录组",children:[]},{level:3,title:"3.2 密码验证-多个正则验证",slug:"_3-2-密码验证-多个正则验证",children:[]},{level:3,title:"3.3 禁止贪婪",slug:"_3-3-禁止贪婪",children:[]},{level:3,title:"3.4 matchAll 全局匹配",slug:"_3-4-matchall-全局匹配",children:[]},{level:3,title:"3.5 search、match 用法",slug:"_3-5-search、match-用法",children:[]},{level:3,title:"3.6 字符串的拆分",slug:"_3-6-字符串的拆分",children:[]},{level:3,title:"3.7 $ 符在正则替换中的使用",slug:"_3-7-符在正则替换中的使用",children:[]},{level:3,title:"3.8 $& 的使用(高亮 html 中的某一内容)",slug:"_3-8-的使用-高亮-html-中的某一内容",children:[]},{level:3,title:"3.9 将 http 加上 s 且加上 www",slug:"_3-9-将-http-加上-s-且加上-www",children:[]},{level:3,title:"3.10 原子组别名",slug:"_3-10-原子组别名",children:[]},{level:3,title:"3.11 优雅 - 使用原子组别名优化正则",slug:"_3-11-优雅-使用原子组别名优化正则",children:[]},{level:3,title:"3.12 正则方法 test",slug:"_3-12-正则方法-test",children:[]},{level:3,title:"3.13 正则方法 exec",slug:"_3-13-正则方法-exec",children:[]}]},{level:2,title:"4.正则提高",slug:"_4-正则提高",children:[{level:3,title:"4.1 ?= 断言匹配（后面是）",slug:"_4-1-断言匹配-后面是",children:[]},{level:3,title:"4.2 使用断言规范价格",slug:"_4-2-使用断言规范价格",children:[]},{level:3,title:"4.3 ?<= 断言匹配（前面是）",slug:"_4-3-断言匹配-前面是",children:[]},{level:3,title:"4.4 使用断言模糊电话号",slug:"_4-4-使用断言模糊电话号",children:[]},{level:3,title:"4.5 ?! 断言匹配（后面不是）",slug:"_4-5-断言匹配-后面不是",children:[]},{level:3,title:"4.6 断言限制用户名关键词",slug:"_4-6-断言限制用户名关键词",children:[]},{level:3,title:"4.7 ?<! 断言匹配（前面不是）",slug:"_4-7-断言匹配-前面不是",children:[]},{level:3,title:"4.8 使用断言排除法统一数据",slug:"_4-8-使用断言排除法统一数据",children:[]}]}],filePathRelative:"regular-expression.md",git:{updatedTime:null,contributors:[]}}},6713:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var p=a(6252);const e=(0,p.uE)('<h1 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h1><h2 id="_1-元字符" tabindex="-1"><a class="header-anchor" href="#_1-元字符" aria-hidden="true">#</a> 1.元字符</h2><h3 id="_1-1-限定符" tabindex="-1"><a class="header-anchor" href="#_1-1-限定符" aria-hidden="true">#</a> 1.1 ? 限定符</h3><blockquote><p>used?</p></blockquote><p>可匹配: <code>use</code>、<code>used</code> 作用: <strong>问号前面的 d 字符要出现 0 次或者 1 次</strong>，d 可有可无，且至多出现 1 次 <br></p><h3 id="_1-2-限定符" tabindex="-1"><a class="header-anchor" href="#_1-2-限定符" aria-hidden="true">#</a> 1.2 * 限定符</h3><blockquote><p>ab*c</p></blockquote><p>可匹配: <code>ac</code>、<code>abc</code>、<code>abbbbbbc</code> 作用: <strong><code>* </code> 前面的可以出现 0 次或者多次</strong>，b 可有可无，且至多出现 n 次 <br></p><h3 id="_1-3-限定符" tabindex="-1"><a class="header-anchor" href="#_1-3-限定符" aria-hidden="true">#</a> 1.3 + 限定符</h3><blockquote><p>ab+c</p></blockquote><p>可匹配: <code>abc</code>、<code>abbbbbbc</code>，不可匹配ac 作用: <strong><code>+</code> 前面的可以出现 1 次或者多次</strong>，必须有 b，且可出现 n 次 <br></p><h3 id="_1-4-限定符" tabindex="-1"><a class="header-anchor" href="#_1-4-限定符" aria-hidden="true">#</a> 1.4 {} 限定符</h3><blockquote><p>ab{6}c、ab{2,}</p></blockquote><p>第一个可匹配: <code>abbbbbbc</code> 第二个可匹配: <code>abbbc</code>、<code>abbc</code>、<code>abbbbc</code>... 作用: <strong>限定字符出现的区间</strong><br></p><h3 id="_1-5-限定符-原子组" tabindex="-1"><a class="header-anchor" href="#_1-5-限定符-原子组" aria-hidden="true">#</a> 1.5 () 限定符（原子组）</h3><blockquote><p>(ab)+</p></blockquote><p>可匹配: <code>abababac</code>、<code>abc</code>、<code>ababc</code> 作用: <strong>匹配多次字符串的出现</strong><br></p><h3 id="_1-6-或运算符" tabindex="-1"><a class="header-anchor" href="#_1-6-或运算符" aria-hidden="true">#</a> 1.6 | 或运算符</h3><blockquote><p>a (cat|dog)</p></blockquote><p>可匹配: <code>a cat</code>、<code>a dog</code> 作用: 不言而喻 <br></p><h3 id="_1-7-字符类-原子表" tabindex="-1"><a class="header-anchor" href="#_1-7-字符类-原子表" aria-hidden="true">#</a> 1.7 [] 字符类（原子表）</h3><blockquote><p>[abc]+</p></blockquote><p>可匹配: abc、aabbcc 作用: <strong>只能取方括号里面的字符的字符串</strong></p><blockquote><p>[a-z]+</p></blockquote><p>可匹配: <code>abc</code>、<code>tiger</code>、<code>aabbcc</code>、<code>dog</code></p><blockquote><p>[a-zA-Z]+</p></blockquote><p>可匹配: <code>AbC</code>、<code>aBf</code></p><blockquote><p>[a-zA-Z0-9]+</p></blockquote><p>可匹配: <code>12Ab</code>、<code>3BcC</code><br></p><h3 id="_1-8-限定符-用于原子表" tabindex="-1"><a class="header-anchor" href="#_1-8-限定符-用于原子表" aria-hidden="true">#</a> 1.8 ^ 限定符（用于原子表）</h3><blockquote><p>[^0-9]</p></blockquote><p>可匹配: <code>aBc</code>、<code>a i</code> 作用: <strong>匹配所有的非数字字符</strong><br></p><h3 id="_1-9-d" tabindex="-1"><a class="header-anchor" href="#_1-9-d" aria-hidden="true">#</a> 1.9 \\d</h3><blockquote><p>\\d+</p></blockquote><p>可匹配: <code>4562318</code>、<code>545</code> 作用: <strong>等同于 <code>[0-9]+</code>，匹配所有数字字符</strong></p><br><h3 id="_1-10-w" tabindex="-1"><a class="header-anchor" href="#_1-10-w" aria-hidden="true">#</a> 1.10 \\w</h3><blockquote><p>\\w+</p></blockquote><p>可匹配: <code>his name is yuan_xin_yue</code> , <code>he is 12 years old</code> 作用: <strong>匹配所有英文字母、数字加上下划线</strong><br></p><h3 id="_1-11-s" tabindex="-1"><a class="header-anchor" href="#_1-11-s" aria-hidden="true">#</a> 1.11 \\s</h3><blockquote><p>\\s</p></blockquote><p>可匹配: he<code></code>is<code></code>a<code></code>very<code></code>good<code></code>man 作用: 匹配所有空白符（包括 Tab 和换行符） <br></p><h3 id="_1-12-d、-w、-s" tabindex="-1"><a class="header-anchor" href="#_1-12-d、-w、-s" aria-hidden="true">#</a> 1.12 \\D、\\W、\\S</h3><blockquote><p>\\D、\\W、\\S</p></blockquote><p>作用: <strong>可匹配非数字字符、非单词字符、非空白字符</strong><br></p><h3 id="_1-13-限定符" tabindex="-1"><a class="header-anchor" href="#_1-13-限定符" aria-hidden="true">#</a> 1.13 . 限定符</h3><blockquote><p>.*</p></blockquote><p>可匹配: <code>this is a dog</code>、<code>i think you are right</code> 作用: <strong>可匹配任意字符，除了换行符</strong><br></p><h3 id="_1-14-、-限定符" tabindex="-1"><a class="header-anchor" href="#_1-14-、-限定符" aria-hidden="true">#</a> 1.14 ^、$ 限定符</h3><blockquote><p>^a、b$</p></blockquote><p>第一个可匹配: abc、alook、about、a 第二个可匹配: adfb、ioob、b 作用: <strong>匹配行首行尾的字符</strong><br></p><h3 id="_1-15-b" tabindex="-1"><a class="header-anchor" href="#_1-15-b" aria-hidden="true">#</a> 1.15 \\b</h3><blockquote><p>\\bthis is a example\\b</p></blockquote><p>作用: <strong>标注字符的边界（换行排除了）</strong><br></p><h3 id="_1-16-贪婪与懒惰匹配" tabindex="-1"><a class="header-anchor" href="#_1-16-贪婪与懒惰匹配" aria-hidden="true">#</a> 1.16 贪婪与懒惰匹配</h3><p><strong>贪婪变懒惰实例：</strong></p><blockquote><p>&lt;.+&gt;</p></blockquote><p>可匹配: <code>&lt;span&gt;&lt;b&gt;this is a sample text&lt;/b&gt;&lt;/span&gt;</code> 不匹配&lt;&gt;内字符串原因: <strong>.会匹配任意字符，自然也会匹配&#39; &gt; &#39;这个字符</strong> 修改方法: &lt;.+?&gt;，切换为懒惰匹配</p><br><h2 id="_2-深入正则" tabindex="-1"><a class="header-anchor" href="#_2-深入正则" aria-hidden="true">#</a> 2.深入正则</h2><h3 id="_2-1-正则的一些应用" tabindex="-1"><a class="header-anchor" href="#_2-1-正则的一些应用" aria-hidden="true">#</a> 2.1 正则的一些应用</h3><ol><li><strong>（最简单）提取数字</strong></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren2200hdcms9988&#39;</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>hd<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">a</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 22009988</span>\n\n<span class="token comment">// 正则表达式</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 22009988</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><br><h3 id="_2-2-字面量创建正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-2-字面量创建正则表达式" aria-hidden="true">#</a> 2.2 字面量创建正则表达式</h3><ol><li><code>/正则表达式/.test(字符串)</code>：字面量形式创建正则表达式，返回值为布尔值</li><li>字面量不能查找变量，但是使用 <code>eval(</code>/${a}/<code>).test(字符串)</code> 可以</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren.com&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;u&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false，不能查变量</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h3 id="_2-3-对象创建正则表达式" tabindex="-1"><a class="header-anchor" href="#_2-3-对象创建正则表达式" aria-hidden="true">#</a> 2.3 对象创建正则表达式</h3><ol><li>可以使用变量了：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren.com&#39;</span>\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;ou&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 第一个参数为变量，第二个为匹配方式</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>实战：输入正则或关键词高亮某段字符串：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> con <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入要检测的内容，支持正则&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// replace 第一个参数是正则规则，第二个参数是被替换的字符串</span>\ndiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> div<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token parameter">search</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span style=&quot;color: red&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>search<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span&gt;</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h3 id="_2-4-转义" tabindex="-1"><a class="header-anchor" href="#_2-4-转义" aria-hidden="true">#</a> 2.4 转义</h3><ol><li>对象创建正则表达式缺点：字符串的自动转化：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> price <span class="token operator">=</span> <span class="token number">23.34</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\d+\\.\\d+&#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里为 false</span>\n\n<span class="token comment">// new RegExp 里面的字符串会自动转换为 (&#39;d+.d+&#39;)</span>\n<span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token number">888888</span>@<span class="token number">122192</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>解决办法：多加一个 <code>\\</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;\\\\d+\\\\.\\\\d+&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>字面量创建的字符串里面的转义：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">&#39;https://www.houdunren.com&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https?:\\/\\/\\w+\\.\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h3 id="_2-5-字符边界约束" tabindex="-1"><a class="header-anchor" href="#_2-5-字符边界约束" aria-hidden="true">#</a> 2.5 字符边界约束</h3><ol><li>案例引入：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;adf3dsfds&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false，必须以数字开头</span>\nhd <span class="token operator">=</span> <span class="token string">&#39;33&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false，起始和结束都为某数字，即只有一个数字</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>如果不加边界约束，纵使限定了类似 <code>{3,6}</code> 指定出现 3-6 次，也能匹配到超过 6 次的字符串。示例代码：</li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;[name=&quot;user&quot;]&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]{3,6}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token comment">// 没加 ^$ 的话，asfdsf 都是能匹配成功</span>\n        document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token string">&#39;正确&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;失败&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_2-6-match-用法" tabindex="-1"><a class="header-anchor" href="#_2-6-match-用法" aria-hidden="true">#</a> 2.6 match 用法</h3><ol><li>当没有指定全局匹配 <code>/g</code>，则匹配成功后返回一个数组（不成功返回 null），数组具体内容如下：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;adfsf0sf&#39;</span>\n<span class="token keyword">let</span> flag <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// [&#39;0&#39;, index: 5, input: &#39;adfsf0sf&#39;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token comment">// 5</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>input<span class="token punctuation">)</span> <span class="token comment">// adfsf0sf</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>groups<span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>当指定全局匹配后，匹配成功则返回一个数组：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren 2020&#39;</span>\n<span class="token keyword">let</span> flag <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// [&#39;2&#39;, &#39;0&#39;, &#39;2&#39;, &#39;0&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="3"><li>判断是否成功匹配（返回布尔值）：</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;haodongxi&#39;</span>\n<span class="token keyword">let</span> flag <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><h3 id="_2-7-d、-s-实例" tabindex="-1"><a class="header-anchor" href="#_2-7-d、-s-实例" aria-hidden="true">#</a> 2.7 \\d、\\s 实例</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 元字符</span>\n<span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren 2020&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;2&#39;, &#39;0&#39;, &#39;2&#39;, &#39;0&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;2020&#39;]</span>\n\nhd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">张三:010-99999999,李四:020-88888888</span><span class="token template-punctuation string">`</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d{3}-\\d{7,8}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;010-99999999&#39;, &#39;020-88888888&#39;]</span>\n\nhd <span class="token operator">=</span> <span class="token string">&#39;houdunren 2020&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\D+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;houdunren&#39;, ...]</span>\n\n<span class="token comment">// \\s、\\S</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39; hd\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\S</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;\\nhd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><br><h3 id="_2-8-w-实例-判断邮箱-判断用户名" tabindex="-1"><a class="header-anchor" href="#_2-8-w-实例-判断邮箱-判断用户名" aria-hidden="true">#</a> 2.8 \\w 实例：判断邮箱 / 判断用户名</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> email <span class="token operator">=</span> <span class="token string">&#39;23012@qq.com&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>email<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\w+@\\w+\\.\\w+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// 输入开头为字母的字符串，最短 5 个字符，最长 10 个字符</span>\n    <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入用户名：&#39;</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]\\w{4,9}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><br><h3 id="_2-9-精巧地匹配所有字符" tabindex="-1"><a class="header-anchor" href="#_2-9-精巧地匹配所有字符" aria-hidden="true">#</a> 2.9 精巧地匹配所有字符</h3><blockquote><p>[\\s\\S]、[\\d\\D] 这样子的原子表，可以精巧地匹配所有字符，弥补了 <code>.</code> 修饰符不能匹配换行符的问题</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;span&gt;\n      houdunren @@@@\n      hdcms\n    &lt;/span&gt;  \n  </span><span class="token template-punctuation string">`</span></span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;span&gt;[\\s\\S]+&lt;\\/span&gt;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 全部匹配了，包括换行符</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 没有全部匹配，不包括换行符</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_2-10-i-与-g-模式修正符" tabindex="-1"><a class="header-anchor" href="#_2-10-i-与-g-模式修正符" aria-hidden="true">#</a> 2.10 i 与 g 模式修正符</h3><ul><li><code>i</code>：不区分大小写</li><li><code>g</code>：全局匹配</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;hoUdUnren&#39;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 匹配成功，不区分大小写</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">U</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;U&#39;, &#39;U&#39;]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;U&#39;, &#39;U&#39;]</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ho@d@nren</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h3 id="_2-11-m-多行匹配修正符-优雅" tabindex="-1"><a class="header-anchor" href="#_2-11-m-多行匹配修正符-优雅" aria-hidden="true">#</a> 2.11 m 多行匹配修正符（优雅）</h3><ul><li><code>m</code>：多行匹配</li></ul><hr><p><strong>重要思路：</strong></p><p>map() 进行遍历时，是能 <strong>返回原数组</strong> 的，且原数组里面每个元素的值是能够修改的。例如：原数组是 [&#39;xxx&#39;, &#39;xxx&#39;, &#39;xxx&#39;]，可以在遍历时将 &#39;xxx&#39; 变成一个对象然后返回，这样原数组就变成了 [{xx: xxx}, {xx: xxx}, {xx: xxx}]</p><hr><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    #1 js,200元 #\n    #2 php,300元 #\n    #9 houdunren.com # 后盾人\n    #3 node.js,180元 #\n  </span><span class="token template-punctuation string">`</span></span>\n  <span class="token comment">// [{name: &#39;js&#39;, price: &#39;200元&#39;}]</span>\n  <span class="token comment">// 下述匹配有几个问题：&#39;.+&#39; 包括后面的 &#39;#&#39;，\\s 包括第二行的空格</span>\n  <span class="token comment">// console.log(hd.match(/\\s*#\\d+\\s+.+\\s+#\\s/g))</span>\n  <span class="token comment">// 多行匹配，每一行单独对待，成功匹配 #1 #2 #3 的内容</span>\n  <span class="token keyword">let</span> lessons <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*#\\d+\\s+.+\\s+#$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*#\\d+\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// console.log(v) // &quot;xx,xxx&quot; 样式的字符串</span>\n    <span class="token comment">// console.log(v.split(&#39;,&#39;)) // [xx,xxx] 样式的数组</span>\n    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 相当于 name: &#39;xxx&#39;, price: &#39;xxx&#39;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> price<span class="token punctuation">}</span> <span class="token comment">// 将原先[&#39;xxx&#39;, &#39;xxx&#39;, &#39;xxx&#39;] 中的 &#39;xxx&#39; 变成一个 {xxx: xxx, xxx: xxx}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// console.log(lessons)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lessons<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token comment">/*\n  输出结果：\n  [\n    {\n      &quot;name&quot;: &quot;js&quot;,\n      &quot;price&quot;: &quot;200元&quot;\n    },\n    {\n      &quot;name&quot;: &quot;php&quot;,\n      &quot;price&quot;: &quot;300元&quot;\n    },\n    {\n      &quot;name&quot;: &quot;node.js&quot;,\n      &quot;price&quot;: &quot;180元&quot;\n    }\n  ]\n  */</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><hr><p><strong>无注释版：</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    #1 js,200元 #\n    #2 php,300元 #\n    #9 houdunren.com # 后盾人\n    #3 node.js,180元 #\n  </span><span class="token template-punctuation string">`</span></span>\n  <span class="token keyword">let</span> lessons <span class="token operator">=</span> hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*#\\w+\\s+.+\\s+#$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    v <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*#\\d+\\s*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*#</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> price<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> price<span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>lessons<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><br><h3 id="_2-12-汉字与字符属性-u" tabindex="-1"><a class="header-anchor" href="#_2-12-汉字与字符属性-u" aria-hidden="true">#</a> 2.12 汉字与字符属性 /u</h3><ol><li>匹配类别“字母”中的单个代码点：<code>/p{L}/gu</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren2010.不断发布教程，加油！@@@3&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{L}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;h&#39;, &#39;o&#39;, &#39;u&#39;, &#39;d&#39;, &#39;u&#39;, &#39;n&#39;, &#39;r&#39;, &#39;e&#39;, &#39;n&#39;, &#39;不&#39;, &#39;断&#39;, &#39;发&#39;, &#39;布&#39;, &#39;教&#39;, &#39;程&#39;, &#39;加&#39;, &#39;油&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>匹配符号：<code>/p{P}/gu</code></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren2010.不断发布教程，加油！@@@3&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{P}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;.&#39;, &#39;，&#39;, &#39;！&#39;, &#39;@&#39;, &#39;@&#39;, &#39;@&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',126),t={start:"3"},o=(0,p.Uk)("匹配汉字、片假名：（具体查看："),c={href:"https://www.unicode.org/standard/supported.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("支持的脚本 (unicode.org)"),u=(0,p.Uk)("）"),r=(0,p.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren2010.不断发布教程，加油！@@@3&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{sc=Han}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;不&#39;, &#39;断&#39;, &#39;发&#39;, &#39;布&#39;, &#39;教&#39;, &#39;程&#39;, &#39;加&#39;, &#39;油&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h3 id="_2-13-lastindex-属性的作用" tabindex="-1"><a class="header-anchor" href="#_2-13-lastindex-属性的作用" aria-hidden="true">#</a> 2.13 lastIndex 属性的作用</h3><blockquote><p>lastIndex：设置正则表达式开始搜索的位置</p></blockquote><ol><li><p>每使用一次 <code>reg.exec(&#39;xxx&#39;)</code>，就能获得一个匹配值及其 index、input 等属性，再次使用能获得下一个匹配值及属性，同时 lastIndex 也会自动加一，若未获得下一个匹配值则返回 null 且重置 lastIndex 为 0（<strong>一定要开启全局匹配！</strong>）</p></li><li><p>利用 <code>xx.match(/\\w/g)</code> 进行匹配后，得到的是一个数组，找不到 匹配字符串 input、匹配的下标 index、group 等属性，若想要得到这些详细属性，可以利用 lastIndex：</p></li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren&#39;</span>\n    <span class="token comment">// console.log(hd.match(/\\w/g)) // 这个匹配的是一个数组，没有 index、input、group 等属性</span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n    <span class="token comment">// 每执行一次 exec，就输出一个匹配的值</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;h&#39;, index: 0, input: &#39;houdunren&#39;, groups: undefined]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;o&#39;, index: 0, input: &#39;houdunren&#39;, groups: undefined]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;u&#39;, index: 0, input: &#39;houdunren&#39;, groups: undefined]</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren&#39;</span>\n    <span class="token comment">// console.log(hd.match(/\\w/g)) // 这个匹配的是一个数组，没有 index、input、group 等属性</span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n      <span class="token comment">/*\n      输出：\n      [&#39;h&#39;, index: 0, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;o&#39;, index: 1, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;u&#39;, index: 2, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;d&#39;, index: 3, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;u&#39;, index: 4, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;n&#39;, index: 5, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;r&#39;, index: 6, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;e&#39;, index: 7, input: &#39;houdunren&#39;, groups: undefined]\n      [&#39;n&#39;, index: 8, input: &#39;houdunren&#39;, groups: undefined]\n      */</span>\n    <span class="token punctuation">}</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><br><h3 id="_2-14-y模式-粘连修饰符" tabindex="-1"><a class="header-anchor" href="#_2-14-y模式-粘连修饰符" aria-hidden="true">#</a> 2.14 y模式：粘连修饰符</h3><blockquote><p>y 模式必须要连续符合条件</p></blockquote><ol><li>基本：</li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;udunren&#39;</span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;u&#39;, index: 0, input: &#39;udunren&#39;, groups: undefined]</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span> <span class="token comment">// 0</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>进阶：</li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的qq群是：1111111,9999999,8888888888我就是一个学前端的小白，网址是 iamyuan.com</span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+),?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span>\n    reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">7</span>\n    <span class="token comment">// 下面输出结果还包括 input、index 等属性</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1111111</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 9999999</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 8888888888</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// null</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="3"><li>最终：</li></ol><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我的qq群是：1111111,9999999,8888888888我就是一个学前端的小白，网址是 iamyuan.com</span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+),?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">y</span></span>\n    reg<span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> <span class="token number">7</span>\n    <span class="token keyword">let</span> qq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      qq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qq<span class="token punctuation">)</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_2-15-原子表基本使用" tabindex="-1"><a class="header-anchor" href="#_2-15-原子表基本使用" aria-hidden="true">#</a> 2.15 原子表基本使用</h3><p>xxxx-xx-xx 与 xxxx/xx/xx 形式匹配：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> tel <span class="token operator">=</span> <span class="token string">&#39;2022/03/23&#39;</span>\n<span class="token comment">// let tel = &#39;2022-03-23&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}[-\\/]\\d{2}[-\\/]\\d{2}$</span><span class="token regex-delimiter">/</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tel<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面匹配仍有问题，因为 xxxx-xx/xx 的形式也能匹配到，应该修改为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\d{4}([-\\/])\\d{2}\\1\\d{2}$</span><span class="token regex-delimiter">/</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><br><h3 id="_2-16-原子表区间匹配" tabindex="-1"><a class="header-anchor" href="#_2-16-原子表区间匹配" aria-hidden="true">#</a> 2.16 原子表区间匹配</h3><p>原子表区间 &amp;&amp; 贪婪匹配实例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;h&#39;, &#39;o&#39;, &#39;u&#39;, &#39;d&#39;, &#39;u&#39;, &#39;n&#39;, &#39;r&#39;, &#39;e&#39;, &#39;n&#39;]</span>\n<span class="token comment">// 贪婪匹配</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;houdunren&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>匹配字母开头、后跟字母数字下划线案例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 以字母开始，后跟字母数字下划线皆可</span>\n<span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name=&quot;username&quot;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\ninput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]\\w{3,6}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><br><h3 id="_2-17-排除匹配" tabindex="-1"><a class="header-anchor" href="#_2-17-排除匹配" aria-hidden="true">#</a> 2.17 排除匹配</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">张三:010-99999999,李四:020-88888888</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 排除方法得到中文</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d:\\-,]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;张三&#39;,&#39;李四&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\p{sc=Han}+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;张三&#39;,&#39;李四&#39;]</span>\n\nhd <span class="token operator">=</span> <span class="token string">&#39;(houdunren).+&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[()]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 匹配括号</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.+]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 匹配点和加号</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><br><h3 id="_2-18-正则操作-dom-元素" tabindex="-1"><a class="header-anchor" href="#_2-18-正则操作-dom-元素" aria-hidden="true">#</a> 2.18 正则操作 DOM 元素</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>后盾人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>houdunren.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>hdcms.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 把标题元素删除</span>\n  <span class="token keyword">let</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body\n  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n  body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_2-19-原子组" tabindex="-1"><a class="header-anchor" href="#_2-19-原子组" aria-hidden="true">#</a> 2.19 原子组</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;h1&gt;houdunren&lt;/h1&gt;\n    &lt;h2&gt;hdcms&lt;/h2&gt;\n  </span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// 设立了原子组后，自动将组名设定为 \\1 \\2 \\3...</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;[\\s\\S]*&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span> <span class="token comment">// [&#39;&lt;h1&gt;houdunren&lt;/h1&gt;&#39;, &#39;&lt;h2&gt;hdcms&lt;/h2&gt;&#39;]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h3 id="_2-20-邮箱验证" tabindex="-1"><a class="header-anchor" href="#_2-20-邮箱验证" aria-hidden="true">#</a> 2.20 邮箱验证</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> mail <span class="token operator">=</span> document\n<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name=&#39;mail&#39;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w-]+@([\\w-]+\\.)+(com|org|cc|cn|net)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\n    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n        <span class="token operator">?</span> <span class="token string">&#39;正确的&#39;</span>\n    <span class="token operator">:</span> <span class="token string">&#39;错误的&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><br><h3 id="_2-21-原子组引用完成替换操作" tabindex="-1"><a class="header-anchor" href="#_2-21-原子组引用完成替换操作" aria-hidden="true">#</a> 2.21 原子组引用完成替换操作</h3><p>替换 h2 标签为 p 标签：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &lt;h1&gt;houdunren&lt;/h1&gt;\n  &lt;span&gt;后盾人&lt;/span&gt;\n  &lt;h2&gt;hdcms&lt;/h2&gt;\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;([\\s\\S]+)&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;p&gt;$2&lt;/p&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 这里的 $2 就是第二个原子组 ([\\s\\S]+)</span>\n<span class="token comment">/*\n  输出：\n    &lt;p&gt;houdunren&lt;/p&gt;\n    &lt;span&gt;后盾人&lt;/span&gt;\n    &lt;p&gt;hdcms&lt;/p&gt;\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>原子组的下标只要从左往右数就好了</p><p><code>str.replace(reg , fun)</code> 中，fun 的参数 p0、p1、p2... 分别代表匹配结果、第一个原子组、第二个原子组...</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &lt;h1&gt;houdunren&lt;/h1&gt;\n  &lt;span&gt;后盾人&lt;/span&gt;\n  &lt;h2&gt;hdcms&lt;/h2&gt;\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;([\\s\\S]+)&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\nhd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// console.log(p0) // &lt;h1&gt;houdunren&lt;/h1&gt; &lt;h2&gt;hdcms&lt;/h2&gt;，匹配的结果</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token comment">// h1 h2 第一个原子组</span>\n    <span class="token comment">// console.log(p2) // houdunren hdcms // 第二个原子组</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h2 id="_3-再深入一下正则" tabindex="-1"><a class="header-anchor" href="#_3-再深入一下正则" aria-hidden="true">#</a> 3. 再深入一下正则</h2><h3 id="_3-1-嵌套分组与不记录组" tabindex="-1"><a class="header-anchor" href="#_3-1-嵌套分组与不记录组" aria-hidden="true">#</a> 3.1 嵌套分组与不记录组</h3><blockquote><p>当正则有两个或以上的原子组，在使用 replace 的回调函数中的第二个、第三个、...参数时，若想忽略其中某一个原子组，只需要在括号里面面加上 <code>?:</code>，如 <code>(?:com|org|cn)</code>；此外，该方法在 replace 方法的第二个参数也能起作用，如 <code>hd.replace(reg, &#39;&lt;p&gt;$2&lt;/p&gt;&#39;)</code></p></blockquote><p>当不想记录某些组，就可以加上 ?: 忽略之：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https?:\\/\\/((?:w+\\.)?\\w+\\.(?:com|org|cn))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\n<span class="token comment">// 忽略了 www. 这一个原子组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;https://www.baidu.com&#39;, &#39;www.baidu.com&#39;, index: 5, input: &#39;\\n    https://www.baidu.com\\n    http://baidu.com\\n  &#39;, groups: undefined]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;https://www.baidu.com&#39;, &#39;www.baidu.com&#39;, index: 5, input: &#39;\\n    https://www.baidu.com\\n    http://baidu.com\\n  &#39;, groups: undefined]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><p>重要！</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n   https://www.baidu.com\n    http://baidu.com\n    https://hdcms.com\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https?:\\/\\/((?:w+\\.)?\\w+\\.(?:com|org|cn))</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n\n<span class="token keyword">let</span> urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// 使用 reg.exec 是为了获得有详细信息的数组</span>\n<span class="token comment">// res[0] 是匹配后的原结果，没有过滤原子组</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    urls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span> <span class="token comment">// [&#39;https://www.baidu.com&#39;, &#39;http://baidu.com&#39;, &#39;https://hdcms.com&#39;]</span>\n\n<span class="token keyword">let</span> urls1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// res[1] 匹配的是第一个原子组</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    urls1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 第一个原子组</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>urls1<span class="token punctuation">)</span> <span class="token comment">// [&#39;www.baidu.com&#39;, &#39;baidu.com&#39;, &#39;hdcms.com&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><br><h3 id="_3-2-密码验证-多个正则验证" tabindex="-1"><a class="header-anchor" href="#_3-2-密码验证-多个正则验证" aria-hidden="true">#</a> 3.2 密码验证-多个正则验证</h3><blockquote><p>思路：可以利用 every 遍历 regs 数组，将 regs 数组的每个成员都 test 一下密码。如果都通过则密码验证通过，否则显示密码错误</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name=&#39;password&#39;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\ninput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n  <span class="token keyword">const</span> regs <span class="token operator">=</span> <span class="token punctuation">[</span>\n      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z0-9]{5,10}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span>\n      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[0-9]</span><span class="token regex-delimiter">/</span></span>\n  <span class="token punctuation">]</span>\n  <span class="token keyword">let</span> state <span class="token operator">=</span> regs<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> e<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state <span class="token operator">?</span> <span class="token string">&#39;正确&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;密码错误&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h3 id="_3-3-禁止贪婪" tabindex="-1"><a class="header-anchor" href="#_3-3-禁止贪婪" aria-hidden="true">#</a> 3.3 禁止贪婪</h3><p><strong>语法：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在启用贪婪的正则式子后面加上 ?，就能使之不贪婪</span>\n<span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;hddd&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hd{2,3}?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 只能取到 2 个 d</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hd*?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取不到 d</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hd+?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取到 1 个 d</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hd??</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 取不到 d</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>标签替换的禁止贪婪使用：</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>houdunren<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>hdcms.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>houdunren.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;span&gt;([\\s\\S]+?)&lt;\\/span&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n  main<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> p1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// p1 为第一个原子组，v 为匹配到的内容</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h4 style=&quot;color: red;&quot;&gt;后盾人-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>p1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/h4&gt;</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><br><h3 id="_3-4-matchall-全局匹配" tabindex="-1"><a class="header-anchor" href="#_3-4-matchall-全局匹配" aria-hidden="true">#</a> 3.4 matchAll 全局匹配</h3><p>matchAll 用法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;([\\s\\S]+?)&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n<span class="token keyword">const</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body\n<span class="token comment">// 使用 match 得不到匹配结果的详细信息，故采用 matchAll，它可以生成一个迭代器（可遍历）</span>\n<span class="token keyword">const</span> hd <span class="token operator">=</span> body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n<span class="token keyword">let</span> contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token comment">// 遍历的每一个元素具有完整信息</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> iterator <span class="token keyword">of</span> hd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  contents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>iterator<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>适配低版本浏览器 - 方法一：递归</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>houdunren<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>hdcms<span class="token punctuation">.</span>com<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>后盾人<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token comment">// matchAll</span>\n  <span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">matchAll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;^&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token keyword">let</span> match <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token keyword">return</span> <span class="token punctuation">[</span>res<span class="token punctuation">,</span> <span class="token operator">...</span>match<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML\n  <span class="token keyword">let</span> search <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;[\\s\\S]+?&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>方法二：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>houdunren.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>hdcms.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>后盾人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token parameter">string<span class="token punctuation">,</span> reg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> matchs <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML<span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(h[1-6])[\\s\\S]+?&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>matchs<span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><br><h3 id="_3-5-search、match-用法" tabindex="-1"><a class="header-anchor" href="#_3-5-search、match-用法" aria-hidden="true">#</a> 3.5 search、match 用法</h3><p><strong>search 基本用法</strong>：返回索引值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 字符串</span>\n<span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren.com&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&#39;h&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>\n\n<span class="token comment">// 正则表达式</span>\n<span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren.com&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">u</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>match 基本用法</strong>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  https://hdcms.com\n  https://www.sina.com.cn\n  https://www.houdunren.com\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https?:\\/\\/(?:\\w+\\.)?(?:\\w+\\.)+(?:com|cn|org|cc)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n<span class="token comment">// let matches = hd.matchAll(reg)</span>\n<span class="token comment">// for (iterator of matches) {</span>\n<span class="token comment">//   console.log(iterator)</span>\n<span class="token comment">// }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;https://hdcms.com&#39;, &#39;https://www.sina.com.cn&#39;, &#39;https://www.houdunren.com&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><br><h3 id="_3-6-字符串的拆分" tabindex="-1"><a class="header-anchor" href="#_3-6-字符串的拆分" aria-hidden="true">#</a> 3.6 字符串的拆分</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;2020/09/12&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-\\/]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [&#39;2020&#39;, &#39;09&#39;, &#39;12&#39;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h3 id="_3-7-符在正则替换中的使用" tabindex="-1"><a class="header-anchor" href="#_3-7-符在正则替换中的使用" aria-hidden="true">#</a> 3.7 $ 符在正则替换中的使用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;(010)99999999 (020)8888888&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\((\\d{3,4})\\)(\\d{7,8})</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;$1-$2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 010-99999999 020-8888888</span>\n\nhd <span class="token operator">=</span> <span class="token string">&#39;=后盾人=&#39;</span>\n<span class="token comment">// $&amp; 就是匹配到的内容</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$&amp;-bilibili&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// =后盾人-bilibili=</span>\n\nhd <span class="token operator">=</span> <span class="token string">&#39;%后盾人==&#39;</span>\n<span class="token comment">// $` 就是匹配内容的前面的内容</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$`&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// %%==</span>\n<span class="token comment">// $&#39; 就是匹配内容的后面的内容</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// %====</span>\n\n<span class="token comment">// 总结</span>\nhd <span class="token operator">=</span> <span class="token string">&#39;=后盾人=&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;$&#39;$&#39;$&amp;$&#39;$&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// ===后盾人===</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><br><h3 id="_3-8-的使用-高亮-html-中的某一内容" tabindex="-1"><a class="header-anchor" href="#_3-8-的使用-高亮-html-中的某一内容" aria-hidden="true">#</a> 3.8 $&amp; 的使用(高亮 html 中的某一内容)</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body main&#39;</span><span class="token punctuation">)</span>\nmain<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">教育</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a href=&quot;https://www.baidu.com&quot;&gt;$&amp;&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><br><h3 id="_3-9-将-http-加上-s-且加上-www" tabindex="-1"><a class="header-anchor" href="#_3-9-将-http-加上-s-且加上-www" aria-hidden="true">#</a> 3.9 将 http 加上 s 且加上 www</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://hdcms.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      开源系统\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>l1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://houdunren.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>后盾人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://yahoo.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>雅虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>http://www.hdcms.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 将 http 变成 https，将没有 www 加上 www，只对 hdcms 和 houdunren 有效</span>\n  <span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(&lt;a.*href=[&#39;&quot;])(http)(:\\/\\/)(www\\.)?(hdcms|houdunren)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n  main<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token string">&#39;s&#39;</span>\n    args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;www.&#39;</span>\n    <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><br><h3 id="_3-10-原子组别名" tabindex="-1"><a class="header-anchor" href="#_3-10-原子组别名" aria-hidden="true">#</a> 3.10 原子组别名</h3><blockquote><p>在原子组括号里最前面加上 <code>?&lt;xxx&gt;</code>，其中 xxx 就是该原子组的别名</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  &lt;h1&gt;houdunren&lt;/h1&gt;\n  &lt;span&gt;后盾人&lt;/span&gt;\n  &lt;h2&gt;hdcms&lt;/h2&gt;\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token comment">// ?&lt;随便命名&gt; - 给组命名</span>\n<span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;(h[1-6])&gt;(?&lt;content&gt;.*?)&lt;\\/\\1&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>\n<span class="token comment">// console.log(hd.replace(reg, &#39;&lt;h4&gt;$2&lt;/h4&gt;&#39;))</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;&lt;h4&gt;$&lt;content&gt;&lt;/h4&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><br><h3 id="_3-11-优雅-使用原子组别名优化正则" tabindex="-1"><a class="header-anchor" href="#_3-11-优雅-使用原子组别名优化正则" aria-hidden="true">#</a> 3.11 优雅 - 使用原子组别名优化正则</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hd<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.houdunren.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>后盾人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.hdcms.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hdcms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.sina.com.cn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>新浪<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// [{link:&#39;&#39;,title:&#39;&#39;}]</span>\n  <span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;a.*?href=([&#39;&quot;])(?&lt;link&gt;.*)\\1&gt;(?&lt;title&gt;.*?)&lt;\\/a&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n  <span class="token keyword">const</span> links <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> iterator <span class="token keyword">of</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    links<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>iterator<span class="token punctuation">[</span><span class="token string">&#39;groups&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span>\n  <span class="token comment">/* 数组形式\n  0: {link: &#39;https://www.houdunren.com&#39;, title: &#39;后盾人&#39;}\n  1: {link: &#39;https://www.hdcms.com&#39;, title: &#39;hdcms&#39;}\n  2: {link: &#39;https://www.sina.com.cn&#39;, title: &#39;新浪&#39;}\n  */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><br><h3 id="_3-12-正则方法-test" tabindex="-1"><a class="header-anchor" href="#_3-12-正则方法-test" aria-hidden="true">#</a> 3.12 正则方法 test</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 字符串方法：match matchAll search replace</span>\n<span class="token keyword">const</span> mail <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name=&#39;email&#39;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\nmail<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value\n  <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[\\w-]+@(\\w+\\.)+(com|org|cn)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h3 id="_3-13-正则方法-exec" tabindex="-1"><a class="header-anchor" href="#_3-13-正则方法-exec" aria-hidden="true">#</a> 3.13 正则方法 exec</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n<span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body main&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count<span class="token operator">++</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><h2 id="_4-正则提高" tabindex="-1"><a class="header-anchor" href="#_4-正则提高" aria-hidden="true">#</a> 4.正则提高</h2><h3 id="_4-1-断言匹配-后面是" tabindex="-1"><a class="header-anchor" href="#_4-1-断言匹配-后面是" aria-hidden="true">#</a> 4.1 ?= 断言匹配（后面是）</h3><blockquote><p>断言放在前面或后面表示在这个地方必须要有断言里的值，否则不匹配</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    后盾人不断分享视频教程，学习后盾人教程提升编程能力\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">let</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">后盾人(?=教程)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n  main<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;a href=&quot;https://houdunren.com&quot;&gt;$&amp;&lt;/a&gt;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token comment">/*\n  结果：左右有空格的 后盾人 变成可点击链接\n  后盾人不断分享视频教程，学习 后盾人 教程提升编程能力\n  */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><br><h3 id="_4-2-使用断言规范价格" tabindex="-1"><a class="header-anchor" href="#_4-2-使用断言规范价格" aria-hidden="true">#</a> 4.2 使用断言规范价格</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使价格都成为 xxx.00 的格式</span>\n<span class="token keyword">let</span> lessons <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  js,200元,300次\n  php,300.00元,100次\n  node.js,180元，260次\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d+)(.00)?(?=元)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\nlessons <span class="token operator">=</span> lessons<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&#39;.00&#39;</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lessons<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_4-3-断言匹配-前面是" tabindex="-1"><a class="header-anchor" href="#_4-3-断言匹配-前面是" aria-hidden="true">#</a> 4.3 ?&lt;= 断言匹配（前面是）</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://baidu.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://yahoo.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>雅虎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=href=([&#39;&quot;])).+(?=\\1)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\n  main<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&#39;https://www.houdunren.com&#39;</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><br><h3 id="_4-4-使用断言模糊电话号" tabindex="-1"><a class="header-anchor" href="#_4-4-使用断言模糊电话号" aria-hidden="true">#</a> 4.4 使用断言模糊电话号</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  向军电话: 12345678901\n  后盾人电话: 98745675603\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;=\\d{7})\\d{4}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span>\nusers <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>\n<span class="token comment">/*\n结果：\n  向军电话: 1234567****\n  后盾人电话: 9874567****\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><br><h3 id="_4-5-断言匹配-后面不是" tabindex="-1"><a class="header-anchor" href="#_4-5-断言匹配-后面不是" aria-hidden="true">#</a> 4.5 ?! 断言匹配（后面不是）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;houdunren2010hdcms&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]+(?!\\d+)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token comment">// 以字母结尾且后面不是数字 hdcms</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><h3 id="_4-6-断言限制用户名关键词" tabindex="-1"><a class="header-anchor" href="#_4-6-断言限制用户名关键词" aria-hidden="true">#</a> 4.6 断言限制用户名关键词</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[name=&quot;username&quot;]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\ninput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;keyup&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(?!.*向军.*)[a-z]{5,6}$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span> <span class="token comment">// 从开头到末尾都不能有 向军</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><br><h3 id="_4-7-断言匹配-前面不是" tabindex="-1"><a class="header-anchor" href="#_4-7-断言匹配-前面不是" aria-hidden="true">#</a> 4.7 ?&lt;! 断言匹配（前面不是）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> hd <span class="token operator">=</span> <span class="token string">&#39;hdcms99houdunren&#39;</span>\n<span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?&lt;!\\d+)[a-z]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// hdcms,...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><h3 id="_4-8-使用断言排除法统一数据" tabindex="-1"><a class="header-anchor" href="#_4-8-使用断言排除法统一数据" aria-hidden="true">#</a> 4.8 使用断言排除法统一数据</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>main<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://www.houdunren.com/1.jpg&quot;</span><span class="token operator">&gt;</span><span class="token number">1.</span>jpg<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://oss.houdunren.com/2.jpg&quot;</span><span class="token operator">&gt;</span><span class="token number">2.</span>jpg<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://cdn.houdunren.com/3.jpg&quot;</span><span class="token operator">&gt;</span><span class="token number">3.</span>jpg<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">&quot;https://houdunren.com/4.jpg&quot;</span><span class="token operator">&gt;</span>后盾人<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n  <span class="token keyword">const</span> main <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;main&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">https:\\/\\/([a-z]+)?(?&lt;!oss)\\..+?(?=\\/)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span>\n  main<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> main<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;https://oss.houdunren.com&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',131),i={},k=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ol",t,[(0,p._)("li",null,[o,(0,p._)("a",c,[l,(0,p.Wm)(a)]),u])]),r],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,p]of s)n[a]=p;return n}}}]);